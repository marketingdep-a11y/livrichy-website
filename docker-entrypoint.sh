#!/bin/bash
set -e

echo "üöÄ Starting Laravel/Statamic application initialization..."

# –ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ /app (Base Directory = /)
APP_DIR="/app"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd "$APP_DIR"
echo "üìÇ Working directory: $APP_DIR"

# –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
echo "üßπ Clearing cache..."
php artisan cache:clear || true
php artisan config:clear || true
php artisan route:clear || true
php artisan view:clear || true
php artisan optimize:clear || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if [ ! -f database/database.sqlite ]; then
    echo "üìù Creating database.sqlite file..."
    mkdir -p database
    touch database/database.sqlite
fi

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—É–±–ª–∏–∫—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Statamic eloquent driver (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã)
echo "üì¶ Publishing Statamic eloquent driver migrations..."
php artisan vendor:publish --tag=statamic-eloquent-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-entries-table-with-string-ids --force || true
php artisan vendor:publish --tag=statamic-eloquent-site-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-taxonomy-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-term-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-collection-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-collection-tree-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-blueprint-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-fieldset-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-form-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-form-submission-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-global-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-global-variables-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-navigation-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-navigation-tree-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-asset-container-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-asset-migrations --force || true
php artisan vendor:publish --tag=statamic-eloquent-token-migrations --force || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
echo "üìã Checking if migration files exist..."
if [ -d "database/migrations" ]; then
    MIGRATION_FILE_COUNT=$(find database/migrations -name "*.php" -type f 2>/dev/null | wc -l | tr -d ' ')
    echo "‚úÖ Found $MIGRATION_FILE_COUNT migration files in database/migrations/"
    if [ "$MIGRATION_FILE_COUNT" -eq 0 ]; then
        echo "‚ö†Ô∏è  Warning: No migration files found! This is a problem."
        echo "üìã Listing database/migrations directory:"
        ls -la database/migrations/ || echo "Directory does not exist!"
    else
        echo "üìã Sample migration files:"
        ls -1 database/migrations/*.php | head -5 || true
    fi
else
    echo "‚ùå Error: database/migrations directory does not exist!"
    echo "üìã Creating database/migrations directory..."
    mkdir -p database/migrations
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É migrations, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
echo "üóÑÔ∏è  Checking migration status..."
if command -v sqlite3 >/dev/null 2>&1; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ ! -f database/database.sqlite ]; then
        echo "‚ùå Database file not found at database/database.sqlite"
    else
        echo "‚úÖ Database file exists at database/database.sqlite"
        DB_FILE_SIZE=$(stat -f%z database/database.sqlite 2>/dev/null || stat -c%s database/database.sqlite 2>/dev/null || echo "0")
        echo "üìä Database file size: $DB_FILE_SIZE bytes"
    fi
    
    HAS_MIGRATIONS_TABLE=$(sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='migrations';" 2>/dev/null | grep -q "migrations" && echo "yes" || echo "no")
    HAS_ENTRIES_TABLE=$(sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='entries';" 2>/dev/null | grep -q "entries" && echo "yes" || echo "no")
    
    echo "üìã Migrations table exists: $HAS_MIGRATIONS_TABLE"
    echo "üìã Entries table exists: $HAS_ENTRIES_TABLE"
    
    if [ "$HAS_MIGRATIONS_TABLE" != "yes" ]; then
        echo "üìã Migration table not found. Installing migration table..."
        php artisan migrate:install --force || true
    else
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        echo "üìã Registered migrations:"
        sqlite3 database/database.sqlite "SELECT migration FROM migrations ORDER BY id;" 2>/dev/null || echo "Could not read migrations"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ Laravel
        echo "üìã Available migration files:"
        ls -1 database/migrations/*.php 2>/dev/null | wc -l || echo "0"
        echo "   (checking if Laravel can find them)"
    fi
    
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ migrations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ç–∞–±–ª–∏—Ü–∞ entries –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    # –∑–Ω–∞—á–∏—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å migrations
    if [ "$HAS_MIGRATIONS_TABLE" = "yes" ] && [ "$HAS_ENTRIES_TABLE" != "yes" ]; then
        echo "‚ö†Ô∏è  Migration table exists but entries table is missing. Resetting migrations..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ
        MIGRATION_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM migrations;" 2>/dev/null || echo "0")
        echo "üìä Migrations recorded in database: $MIGRATION_COUNT"
        
        if [ "$MIGRATION_COUNT" -gt 0 ]; then
            echo "üîÑ Clearing migrations table (found $MIGRATION_COUNT migrations but tables missing)..."
            sqlite3 database/database.sqlite "DELETE FROM migrations;" 2>/dev/null || true
            echo "‚úÖ Migrations table cleared. Ready to run migrations."
        fi
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
echo "üìä Migration status before running:"
php artisan migrate:status || true

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É migrations —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
# –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
if command -v sqlite3 >/dev/null 2>&1; then
    MIGRATIONS_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM migrations;" 2>/dev/null || echo "0")
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –∫ –º–∏–≥—Ä–∞—Ü–∏—è–º
    if [ "$MIGRATIONS_COUNT" -eq 0 ]; then
        echo "üîÑ Syncing migrations table with existing tables..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        declare -A TABLE_MIGRATIONS=(
            ["asset_containers"]="2024_03_07_100000_create_asset_containers_table"
            ["assets_meta"]="2024_03_07_100000_create_asset_table"
            ["blueprints"]="2024_03_07_100000_create_blueprints_table"
            ["collections"]="2024_03_07_100000_create_collections_table"
            ["entries"]="2024_03_07_100000_create_entries_table_with_string_ids"
            ["fieldsets"]="2024_03_07_100000_create_fieldsets_table"
            ["form_submissions"]="2024_03_07_100000_create_form_submissions_table"
            ["forms"]="2024_03_07_100000_create_forms_table"
            ["global_set_variables"]="2024_03_07_100000_create_global_variables_table"
            ["global_sets"]="2024_03_07_100000_create_globals_table"
            ["trees"]="2024_03_07_100000_create_navigation_trees_table"
            ["navigations"]="2024_03_07_100000_create_navigations_table"
            ["taxonomies"]="2024_03_07_100000_create_taxonomies_table"
            ["taxonomy_terms"]="2024_03_07_100000_create_terms_table"
            ["tokens"]="2024_03_07_100000_create_tokens_table"
            ["sites"]="2024_07_16_100000_create_sites_table"
        )
        
        BATCH=1
        for TABLE in "${!TABLE_MIGRATIONS[@]}"; do
            MIGRATION="${TABLE_MIGRATIONS[$TABLE]}"
            if sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='$TABLE';" 2>/dev/null | grep -q "$TABLE"; then
                echo "  ‚úÖ $TABLE exists - marking $MIGRATION as run"
                sqlite3 database/database.sqlite "INSERT OR IGNORE INTO migrations (migration, batch) VALUES ('$MIGRATION', $BATCH);" 2>/dev/null || true
            fi
        done
        
        # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ form_submissions –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='form_submissions';" 2>/dev/null | grep -q "form_submissions"; then
            sqlite3 database/database.sqlite "INSERT OR IGNORE INTO migrations (migration, batch) VALUES ('2024_05_15_100000_modify_form_submissions_id', $BATCH);" 2>/dev/null || true
        fi
        
        echo "‚úÖ Migrations table synced with existing tables"
    fi
fi

# –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ - Laravel —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
echo "üóÑÔ∏è  Running database migrations..."
php artisan migrate --force

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π
echo "üìä Migration status after running:"
php artisan migrate:status || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
if command -v sqlite3 >/dev/null 2>&1; then
    echo "üìã Tables in database:"
    sqlite3 database/database.sqlite ".tables" 2>/dev/null || echo "Could not list tables"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    echo "üîç Checking critical tables:"
    CRITICAL_TABLES=("asset_containers" "fieldsets" "trees" "terms" "global_variables")
    MISSING_TABLES=0
    for TABLE in "${CRITICAL_TABLES[@]}"; do
        if sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='$TABLE';" 2>/dev/null | grep -q "$TABLE"; then
            echo "  ‚úÖ $TABLE exists"
        else
            echo "  ‚ùå $TABLE MISSING"
            MISSING_TABLES=$((MISSING_TABLES + 1))
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ
    EXISTING_TABLES_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name NOT IN ('sqlite_sequence', 'migrations');" 2>/dev/null || echo "0")
    MIGRATIONS_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM migrations;" 2>/dev/null || echo "0")
    
    echo "üìä Existing tables: $EXISTING_TABLES_COUNT"
    echo "üìä Recorded migrations: $MIGRATIONS_COUNT"
    
    # –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ,
    # –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É migrations –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ
    if [ "$MISSING_TABLES" -gt 0 ]; then
        echo "‚ö†Ô∏è  Found $MISSING_TABLES missing critical tables."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if [ "$EXISTING_TABLES_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Some tables exist, but critical ones are missing."
            echo "‚ö†Ô∏è  This might cause migration conflicts. Proceeding carefully..."
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —Å --force, Laravel –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ
            echo "üóÑÔ∏è  Running migrations (will skip existing tables)..."
            php artisan migrate --force || echo "‚ö†Ô∏è  Some migrations failed (this is expected if tables exist)"
        else
            echo "üîÑ No tables exist - clearing migrations table and running all migrations..."
            sqlite3 database/database.sqlite "DELETE FROM migrations;" 2>/dev/null || true
            echo "üóÑÔ∏è  Running all migrations..."
            php artisan migrate --force
        fi
        
        echo "üìä Migration status after re-run:"
        php artisan migrate:status || true
    elif [ "$EXISTING_TABLES_COUNT" -gt 0 ] && [ "$MIGRATIONS_COUNT" -eq 0 ]; then
        # –¢–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        # –ù—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å migrate:status –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        echo "‚ö†Ô∏è  Tables exist but no migrations are recorded."
        echo "‚ö†Ô∏è  This might cause issues. The migrations table is out of sync."
        echo "üí° Note: Laravel will try to run migrations and may fail if tables exist."
        echo "üîÑ Attempting to run migrations - they should be skipped for existing tables..."
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º --pretend –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º
        # Laravel –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        php artisan migrate --force 2>&1 | grep -v "already exists" || true
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ Statamic)
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã entries - —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ Statamic –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
if command -v sqlite3 >/dev/null 2>&1; then
    DB_HAS_ENTRIES=$(sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='entries';" 2>/dev/null | grep -q "entries" && echo "yes" || echo "no")
    
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã entries –Ω–µ—Ç –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π, –∑–Ω–∞—á–∏—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if [ "$DB_HAS_ENTRIES" != "yes" ]; then
        echo "‚ö†Ô∏è  Warning: Table 'entries' was not found after migrations. This might indicate an issue with migrations."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ migrations
        echo "üìã Checking migrations table content:"
        sqlite3 database/database.sqlite "SELECT * FROM migrations;" 2>/dev/null || echo "Could not read migrations table"
        
        # –ü—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞
        echo "üîÑ Clearing cache and re-running migrations..."
        php artisan config:clear || true
        php artisan cache:clear || true
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        echo "üîÑ Re-running migrations with verbose output..."
        php artisan migrate --force -vvv || true
        
        DB_HAS_ENTRIES=$(sqlite3 database/database.sqlite "SELECT name FROM sqlite_master WHERE type='table' AND name='entries';" 2>/dev/null | grep -q "entries" && echo "yes" || echo "no")
        
        if [ "$DB_HAS_ENTRIES" != "yes" ]; then
            echo "‚ùå Error: Table 'entries' still not found after multiple migration attempts."
            echo "üí° Trying to manually check migration files..."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            if [ -f "database/migrations/2024_03_07_100000_create_entries_table_with_string_ids.php" ]; then
                echo "‚úÖ Migration file exists: create_entries_table_with_string_ids.php"
            else
                echo "‚ùå Migration file NOT found: create_entries_table_with_string_ids.php"
            fi
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
            echo "üîÑ Attempting to run migrations from specific path..."
            php artisan migrate --path=database/migrations --force || true
        fi
    fi
else
    # –ï—Å–ª–∏ sqlite3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
    DB_HAS_ENTRIES="yes"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ entries (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
DB_HAS_DATA="no"
if [ "$DB_HAS_ENTRIES" = "yes" ] && command -v sqlite3 >/dev/null 2>&1; then
    ENTRY_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM entries;" 2>/dev/null || echo "0")
    if [ "$ENTRY_COUNT" -gt 0 ]; then
        DB_HAS_DATA="yes"
    fi
fi

# –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ñ–∞–π–ª–æ–≤
if [ "$DB_HAS_DATA" != "yes" ]; then
    echo "üîÑ Database is empty - importing Statamic content from files..."
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–π—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–º)
    echo "üåç Importing Statamic sites..."
    php artisan statamic:eloquent:import-sites

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º asset containers –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–û entries, —Ç–∞–∫ –∫–∞–∫ entries –º–æ–≥—É—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ assets!)
    echo "üìÅ Importing Statamic asset containers..."
    php artisan statamic:eloquent:import-assets --force --only-asset-containers || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º assets –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–û entries!)
    echo "üñºÔ∏è  Importing Statamic assets..."
    php artisan statamic:eloquent:import-assets --force --only-assets || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º blueprints –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–Ω–æ - –î–û entries!)
    echo "üìã Importing Statamic blueprints..."
    php artisan statamic:eloquent:import-blueprints --force --only-blueprints || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fieldsets –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–Ω–æ - –î–û entries!)
    echo "üìÑ Importing Statamic fieldsets..."
    php artisan statamic:eloquent:import-blueprints --force --only-fieldsets || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–û entries!)
    echo "üì¶ Importing Statamic collections..."
    php artisan statamic:eloquent:import-collections --force

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤—å—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–û entries!)
    echo "üå≤ Importing Statamic collection trees..."
    php artisan statamic:eloquent:import-collections --force --only-collection-trees || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–û entries!)
    echo "üè∑Ô∏è  Importing Statamic taxonomies..."
    php artisan statamic:eloquent:import-taxonomies --force --only-taxonomies || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Ä–º–∏–Ω—ã —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üìå Importing Statamic taxonomy terms..."
    php artisan statamic:eloquent:import-taxonomies --force --only-terms || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ü–û–°–õ–ï blueprints –∏ collections!)
    echo "üìù Importing Statamic entries..."
    php artisan statamic:eloquent:import-entries

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üß≠ Importing Statamic navigations..."
    php artisan statamic:eloquent:import-navs --force --only-navs || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ä–µ–≤—å—è –Ω–∞–≤–∏–≥–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üå≥ Importing Statamic navigation trees..."
    php artisan statamic:eloquent:import-navs --force --only-nav-trees || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üåê Importing Statamic global sets..."
    php artisan statamic:eloquent:import-globals --force --only-global-sets || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üîß Importing Statamic global variables..."
    php artisan statamic:eloquent:import-globals --force --only-global-variables || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    echo "üìù Importing Statamic forms..."
    php artisan statamic:eloquent:import-forms --force --only-forms || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º submissions —Ñ–æ—Ä–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –¥–µ–ø–ª–æ–µ)
    echo "üìã Importing Statamic form submissions (if any)..."
    php artisan statamic:eloquent:import-forms --force --only-form-submissions || true

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º revisions (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
    echo "üìö Importing Statamic revisions (if enabled)..."
    php artisan statamic:eloquent:import-revisions || true

    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
    echo "üßπ Clearing cache after import..."
    php artisan cache:clear || true
    php artisan statamic:stache:clear || true

    # –û–±–Ω–æ–≤–ª—è–µ–º Statamic Stache (–ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)
    echo "üîÑ Refreshing Statamic Stache..."
    php artisan statamic:stache:refresh || true
else
    echo "‚úÖ Database already contains data - skipping import (preserving existing data)"
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    echo "üßπ Refreshing cache..."
    php artisan cache:clear || true
    php artisan statamic:stache:refresh || true
fi

# –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
echo "‚öôÔ∏è  Optimizing application..."
php artisan config:cache || true
php artisan route:cache || true
php artisan view:cache || true

# –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è storage (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!)
echo "üîó Creating storage symlink..."
# –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ–π)
if [ -L "public/storage" ]; then
    echo "  Removing existing storage symlink..."
    rm -f public/storage || true
fi
# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
php artisan storage:link || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
if [ -L "public/storage" ]; then
    echo "  ‚úÖ Storage symlink exists"
    ls -la public/storage | head -1
else
    echo "  ‚ö†Ô∏è  Storage symlink not found - trying to create manually..."
    ln -sf ../storage/app/public public/storage || true
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ assets
echo "üìÅ Checking assets directory..."
if [ ! -d "public/assets" ]; then
    echo "  Creating public/assets directory..."
    mkdir -p public/assets
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ storage/app/public
if [ ! -d "storage/app/public" ]; then
    echo "  Creating storage/app/public directory..."
    mkdir -p storage/app/public
fi

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!)
echo "üîí Setting permissions..."
chmod -R 775 storage bootstrap/cache || true
chmod -R 775 public/assets || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
echo "üìã Checking permissions..."
ls -ld public/storage || echo "  ‚ö†Ô∏è  public/storage not accessible"
ls -ld storage/app/public || echo "  ‚ö†Ô∏è  storage/app/public not accessible"
ls -ld public/assets || echo "  ‚ö†Ô∏è  public/assets not accessible"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ assets
echo "üìÅ Checking assets directory..."
ASSET_COUNT=$(find public/assets -type f 2>/dev/null | wc -l | tr -d ' ')
echo "  ‚úÖ Found $ASSET_COUNT files in public/assets"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –≤ assets
echo "üîí Checking asset file permissions..."
if [ -d "public/assets" ]; then
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ assets
    chmod -R 644 public/assets/* 2>/dev/null || true
    find public/assets -type d -exec chmod 755 {} \; 2>/dev/null || true
    find public/assets -type f -exec chmod 644 {} \; 2>/dev/null || true
    echo "  ‚úÖ Asset file permissions set"
fi

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º assets —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –Ω–µ—Ç)
echo "üîÑ Syncing assets with database..."
php artisan statamic:eloquent:sync-assets || echo "  ‚ö†Ô∏è  Asset sync failed (may not be critical)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é assets (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
if command -v sqlite3 >/dev/null 2>&1; then
    ASSET_COUNT=$(sqlite3 database/database.sqlite "SELECT COUNT(*) FROM assets_meta;" 2>/dev/null || echo "0")
    echo "  üìä Assets in database: $ASSET_COUNT"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ URL (beach-pros-realty-inc..jpg)
    if [ -f "public/assets/properties/beach-pros-realty-inc..jpg" ]; then
        echo "  ‚úÖ Test file exists: public/assets/properties/beach-pros-realty-inc..jpg"
    else
        echo "  ‚ö†Ô∏è  Test file NOT found: public/assets/properties/beach-pros-realty-inc..jpg"
        echo "  üìÅ Listing public/assets/properties/:"
        ls -la public/assets/properties/ 2>/dev/null | head -5 || echo "    Directory not found"
    fi
fi

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫—ç—à–∞ Glide (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!)
echo "üñºÔ∏è  Setting up Glide image cache..."
# Glide –∏—Å–ø–æ–ª—å–∑—É–µ—Ç storage/statamic/glide –¥–ª—è –∫—ç—à–∞
mkdir -p storage/statamic/glide
mkdir -p storage/statamic/glide/tmp
mkdir -p storage/framework/cache/glide

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Glide
chmod -R 775 storage/statamic 2>/dev/null || true
chmod -R 775 storage/framework/cache 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
if [ -d "storage/statamic/glide" ]; then
    echo "  ‚úÖ Glide cache directory exists"
else
    echo "  ‚ùå Failed to create Glide cache directory"
fi

# –û—á–∏—â–∞–µ–º –∫—ç—à –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Glide –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
echo "üßπ Clearing Glide image cache..."
php artisan statamic:glide:clear || echo "  ‚ö†Ô∏è  Glide clear failed (may not be critical)"
if [ -d "storage/statamic/glide" ]; then
    rm -rf storage/statamic/glide/* 2>/dev/null || true
fi
echo "  ‚úÖ Glide cache cleared"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ GD (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
echo "üîç Checking GD extension..."
php -r "if (extension_loaded('gd')) { 
    echo '  ‚úÖ GD extension is loaded\n'; 
    \$info = gd_info(); 
    echo '  - GD Version: ' . \$info['GD Version'] . '\n'; 
    echo '  - JPEG Support: ' . (isset(\$info['JPEG Support']) && \$info['JPEG Support'] ? 'Yes' : 'No') . '\n'; 
    echo '  - PNG Support: ' . (isset(\$info['PNG Support']) && \$info['PNG Support'] ? 'Yes' : 'No') . '\n'; 
    echo '  - WebP Support: ' . (function_exists('imagewebp') ? 'Yes' : 'No') . '\n';
    echo '  - FreeType Support: ' . (isset(\$info['FreeType Support']) && \$info['FreeType Support'] ? 'Yes' : 'No') . '\n';
} else { 
    echo '  ‚ùå GD extension NOT loaded!\n'; 
    exit(1); 
}" || echo "  ‚ö†Ô∏è  GD check failed"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
echo "üìù Setting up logging..."
mkdir -p storage/logs
chmod -R 775 storage/logs 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ª–æ–≥–æ–≤
if [ -d "storage/logs" ] && [ -w "storage/logs" ]; then
    echo "  ‚úÖ Logs directory is writable"
else
    echo "  ‚ö†Ô∏è  Logs directory may not be writable"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ APP_DEBUG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
echo "üîß Checking error reporting..."
php -r "require 'vendor/autoload.php'; \$app = require_once 'bootstrap/app.php'; echo '  - APP_DEBUG: ' . (config('app.debug') ? 'true' : 'false') . PHP_EOL; echo '  - Error Reporting: ' . (ini_get('display_errors') ? 'On' : 'Off') . PHP_EOL;" 2>&1 | head -2 || echo "  ‚ö†Ô∏è  Could not check error reporting"

echo "‚úÖ Initialization completed!"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
echo "üåê Starting Laravel development server..."
exec php artisan serve --host=0.0.0.0 --port=8000

